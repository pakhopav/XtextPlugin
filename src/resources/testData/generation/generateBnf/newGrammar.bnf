{
    tokens = [
      ID ="regexp:^?([a-z]|[A-Z]|$|_)([a-z]|[A-Z]|$|_|[0-9])*"
      STRING ="regexp:\"(\\.|[^\\\"])*\"?|'(\\.|[^\\'])*'?"
      ML_COMMENT ="regexp:/\*(?s).*\*/"
      SL_COMMENT ="regexp://[^\n\r](\r?\n)?"
      WS ="regexp:( |\t|\r|\n)+"
      ANY_OTHER ="regexp:."
      HEX ="regexp:(0x|0X)([0-9]|[a-f]|[A-F]|_)+(#((b|B)(i|I)|(l|L)))?"
      INT ="regexp:[0-9]([0-9]|_)*"
      DECIMAL ="regexp:[0-9]([0-9]|_)*((e|E)(\+|-)?[0-9]([0-9]|_)*)?((b|B)(i|I|d|D)|(l|L|d|D|f|F))?"
    ]
    parserClass="com.intellij.xtext.language.parser.XtextParser"
        
    extends="com.intellij.xtext.language.psi.impl.XtextPsiCompositeElementImpl"
    psiClassPrefix="Xtext"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.xtext.language.psi"
    psiImplPackage="com.intellij.xtext.language.impl"

    elementTypeHolderClass="com.intellij.xtext.language.psi.XtextTypes"
    elementTypeClass="com.intellij.xtext.language.psi.XtextElementType"
    tokenTypeClass="com.intellij.xtext.language.psi.XtextTokenType"
    psiImplUtilClass="com.intellij.xtext.language.psi.impl.XtextPsiImplUtil"
    parserUtilClass= "com.intellij.xtext.language.parserUtilBase.GeneratedParserUtilBaseCopy"
    generateTokenAccessors=true
    generateTokens=true
}
Domainmodel ::= XImportSection ? AbstractElement *  
AbstractElement ::= PackageDeclaration |  Entity  
PackageDeclaration ::= 'package' QualifiedName '{' AbstractElement * '}'  
Entity ::= 'entity' ValidID ('extends' JvmTypeReference  )? '{' Feature * '}'  
Feature ::= Property |  Operation  
Property ::= ValidID ':' JvmTypeReference  
Operation ::= 'op' ValidID '(' (FullJvmFormalParameter (',' FullJvmFormalParameter  )*  )? ')' ':' JvmTypeReference XBlockExpression  
JvmTypeReference ::= JvmParameterizedTypeReference (ArrayBrackets  ) * |  XFunctionTypeRef  
ArrayBrackets ::= '[' ']'  
XFunctionTypeRef ::= ('(' (JvmTypeReference (',' JvmTypeReference  )*  )? ')'  )? '=>' JvmTypeReference  
JvmParameterizedTypeReference ::= REFERENCE_JvmType_QualifiedName ('<' JvmArgumentTypeReference (',' JvmArgumentTypeReference  )* '>' (('.'  ) REFERENCE_JvmType_ValidID ('<' JvmArgumentTypeReference (',' JvmArgumentTypeReference  )* '>'  )?  )*  )?  
JvmArgumentTypeReference ::= JvmTypeReference |  JvmWildcardTypeReference  
RuleFromJvmWildcardTypeReference_JvmWildcardTypeReference ::= '?' (JvmUpperBound (JvmUpperBoundAnded  )* |  JvmLowerBound (JvmLowerBoundAnded  )*  )?  
JvmWildcardTypeReference ::= RuleFromJvmWildcardTypeReference_JvmWildcardTypeReference  
JvmUpperBound ::= 'extends' JvmTypeReference  
JvmUpperBoundAnded ::= '&' JvmTypeReference  
JvmLowerBound ::= 'super' JvmTypeReference  
JvmLowerBoundAnded ::= '&' JvmTypeReference  
JvmTypeParameter ::= ValidID (JvmUpperBound (JvmUpperBoundAnded  )*  )?  
QualifiedName ::= ValidID ('.' ValidID  )*  
QualifiedNameWithWildcard ::= QualifiedName '.' '*'  
ValidID ::= ID  
XImportSection ::= XImportDeclaration +  
XImportDeclaration ::= 'import' (('static' 'extension' ? REFERENCE_JvmDeclaredType_QualifiedNameInStaticImport ('*' |  ValidID  ) )|  REFERENCE_JvmDeclaredType_QualifiedName |  QualifiedNameWithWildcard  )';' ?  
QualifiedNameInStaticImport ::= (ValidID '.'  )+  
XExpression ::= XAssignment  
RuleFromXAssignment_XAssignment ::= REFERENCE_types-JvmIdentifiableElement_FeatureCallID OpSingleAssign XAssignment  
XAssignment ::= RuleFromXAssignment_XAssignment |  XOrExpression ((REFERENCE_types-JvmIdentifiableElement_OpMultiAssign  ) XAssignment  )?  
OpSingleAssign ::= '='  
OpMultiAssign ::= '+=' |  '-=' |  '*=' |  '/=' |  '%=' |  '<' '<' '=' |  '>' '>' ? '>='  
XOrExpression ::= XAndExpression ((REFERENCE_types-JvmIdentifiableElement_OpOr  ) XAndExpression  )*  
OpOr ::= '||'  
XAndExpression ::= XEqualityExpression ((REFERENCE_types-JvmIdentifiableElement_OpAnd  ) XEqualityExpression  )*  
OpAnd ::= '&&'  
XEqualityExpression ::= XRelationalExpression ((REFERENCE_types-JvmIdentifiableElement_OpEquality  ) XRelationalExpression  )*  
OpEquality ::= '==' |  '!=' |  '===' |  '!=='  
XRelationalExpression ::= XOtherOperatorExpression (('instanceof'  ) JvmTypeReference |  (REFERENCE_types-JvmIdentifiableElement_OpCompare  ) XOtherOperatorExpression  )*  
OpCompare ::= '>=' |  '<' '=' |  '>' |  '<'  
XOtherOperatorExpression ::= XAdditiveExpression ((REFERENCE_types-JvmIdentifiableElement_OpOther  ) XAdditiveExpression  )*  
OpOther ::= '->' |  '..<' |  '>' '..' |  '..' |  '=>' |  '>' (('>' '>'  ) |  '>'  )|  '<' (('<' '<'  ) |  '<' |  '=>'  )|  '<>' |  '?:'  
XAdditiveExpression ::= XMultiplicativeExpression ((REFERENCE_types-JvmIdentifiableElement_OpAdd  ) XMultiplicativeExpression  )*  
OpAdd ::= '+' |  '-'  
XMultiplicativeExpression ::= XUnaryOperation ((REFERENCE_types-JvmIdentifiableElement_OpMulti  ) XUnaryOperation  )*  
OpMulti ::= '*' |  '**' |  '/' |  '%'  
RuleFromXUnaryOperation_XUnaryOperation ::= REFERENCE_types-JvmIdentifiableElement_OpUnary XUnaryOperation  
XUnaryOperation ::= RuleFromXUnaryOperation_XUnaryOperation |  XCastedExpression  
OpUnary ::= "!" |  "-" |  "+"  
XCastedExpression ::= XPostfixOperation (('as'  ) JvmTypeReference  )*  
XPostfixOperation ::= XMemberFeatureCall (REFERENCE_types-JvmIdentifiableElement_OpPostfix  ) ?  
OpPostfix ::= "++" |  "--"  
XMemberFeatureCall ::= XPrimaryExpression ((('.' |  "::"  )REFERENCE_types-JvmIdentifiableElement_FeatureCallID OpSingleAssign  ) XAssignment |  (("." |  "?." |  "::"  ) ) ('<' JvmArgumentTypeReference (',' JvmArgumentTypeReference  )* '>'  )? REFERENCE_types-JvmIdentifiableElement_IdOrSuper ('(' (XShortClosure |  XExpression (',' XExpression  )*  )? ')'  )? XClosure ?  )*  
XPrimaryExpression ::= XConstructorCall |  XBlockExpression |  XSwitchExpression |  XSynchronizedExpression |  XFeatureCall |  XLiteral |  XIfExpression |  XForLoopExpression |  XBasicForLoopExpression |  XWhileExpression |  XDoWhileExpression |  XThrowExpression |  XReturnExpression |  XTryCatchFinallyExpression |  XParenthesizedExpression  
XLiteral ::= XCollectionLiteral |  XClosure |  XBooleanLiteral |  XNumberLiteral |  XNullLiteral |  XStringLiteral |  XTypeLiteral  
XCollectionLiteral ::= XSetLiteral |  XListLiteral  
RuleFromXSetLiteral_XSetLiteral ::= '#' '{' (XExpression (',' XExpression  )*  )? '}'  
XSetLiteral ::= RuleFromXSetLiteral_XSetLiteral  
RuleFromXListLiteral_XListLiteral ::= '#' '[' (XExpression (',' XExpression  )*  )? ']'  
XListLiteral ::= RuleFromXListLiteral_XListLiteral  
XClosure ::= ('['  ) ((JvmFormalParameter (',' JvmFormalParameter  )*  )? '|'  ) ? XExpressionInClosure ']'  
RuleFromXExpressionInClosure_XBlockExpression ::= (XExpressionOrVarDeclaration ';' ?  )*  
XExpressionInClosure ::= RuleFromXExpressionInClosure_XBlockExpression  
XShortClosure ::= ((JvmFormalParameter (',' JvmFormalParameter  )*  )? '|'  ) XExpression  
XParenthesizedExpression ::= '(' XExpression ')'  
RuleFromXIfExpression_XIfExpression ::= 'if' '(' XExpression ')' XExpression ('else' XExpression  )?  
XIfExpression ::= RuleFromXIfExpression_XIfExpression  
RuleFromXSwitchExpression_XSwitchExpression ::= 'switch' (('(' JvmFormalParameter ':'  ) XExpression ')' |  (JvmFormalParameter ':'  ) ? XExpression  )'{' (XCasePart  )* ('default' ':' XExpression  )? '}'  
XSwitchExpression ::= RuleFromXSwitchExpression_XSwitchExpression  
RuleFromXCasePart_XCasePart ::= JvmTypeReference ? ('case' XExpression  )? (':' XExpression |  ','  ) 
XCasePart ::= RuleFromXCasePart_XCasePart  
XForLoopExpression ::= ('for' '(' JvmFormalParameter ':'  ) XExpression ')' XExpression  
RuleFromXBasicForLoopExpression_XBasicForLoopExpression ::= 'for' '(' (XExpressionOrVarDeclaration (',' XExpressionOrVarDeclaration  )*  )? ';' XExpression ? ';' (XExpression (',' XExpression  )*  )? ')' XExpression  
XBasicForLoopExpression ::= RuleFromXBasicForLoopExpression_XBasicForLoopExpression  
RuleFromXWhileExpression_XWhileExpression ::= 'while' '(' XExpression ')' XExpression  
XWhileExpression ::= RuleFromXWhileExpression_XWhileExpression  
RuleFromXDoWhileExpression_XDoWhileExpression ::= 'do' XExpression 'while' '(' XExpression ')'  
XDoWhileExpression ::= RuleFromXDoWhileExpression_XDoWhileExpression  
RuleFromXBlockExpression_XBlockExpression ::= '{' (XExpressionOrVarDeclaration ';' ?  )* '}'  
XBlockExpression ::= RuleFromXBlockExpression_XBlockExpression  
XExpressionOrVarDeclaration ::= XVariableDeclaration |  XExpression  
RuleFromXVariableDeclaration_XVariableDeclaration ::= ('var' |  'val'  )((JvmTypeReference ValidID  ) |  ValidID  )('=' XExpression  )?  
XVariableDeclaration ::= RuleFromXVariableDeclaration_XVariableDeclaration  
JvmFormalParameter ::= (JvmTypeReference  )? ValidID  
FullJvmFormalParameter ::= JvmTypeReference ValidID  
RuleFromXFeatureCall_XFeatureCall ::= ('<' JvmArgumentTypeReference (',' JvmArgumentTypeReference  )* '>'  )? REFERENCE_types-JvmIdentifiableElement_IdOrSuper ('(' (XShortClosure |  XExpression (',' XExpression  )*  )? ')'  )? XClosure ?  
XFeatureCall ::= RuleFromXFeatureCall_XFeatureCall  
FeatureCallID ::= ValidID |  'extends' |  'static' |  'import' |  'extension'  
IdOrSuper ::= FeatureCallID |  'super'  
RuleFromXConstructorCall_XConstructorCall ::= 'new' REFERENCE_types-JvmConstructor_QualifiedName ('<' JvmArgumentTypeReference (',' JvmArgumentTypeReference  )* '>'  )? ('(' (XShortClosure |  XExpression (',' XExpression  )*  )? ')'  )? XClosure ?  
XConstructorCall ::= RuleFromXConstructorCall_XConstructorCall  
RuleFromXBooleanLiteral_XBooleanLiteral ::= ('false' |  'true'  ) 
XBooleanLiteral ::= RuleFromXBooleanLiteral_XBooleanLiteral  
RuleFromXNullLiteral_XNullLiteral ::= 'null'  
XNullLiteral ::= RuleFromXNullLiteral_XNullLiteral  
RuleFromXNumberLiteral_XNumberLiteral ::= Number  
XNumberLiteral ::= RuleFromXNumberLiteral_XNumberLiteral  
RuleFromXStringLiteral_XStringLiteral ::= STRING  
XStringLiteral ::= RuleFromXStringLiteral_XStringLiteral  
RuleFromXTypeLiteral_XTypeLiteral ::= 'typeof' '(' REFERENCE_types-JvmType_QualifiedName (ArrayBrackets  )* ')'  
XTypeLiteral ::= RuleFromXTypeLiteral_XTypeLiteral  
RuleFromXThrowExpression_XThrowExpression ::= 'throw' XExpression  
XThrowExpression ::= RuleFromXThrowExpression_XThrowExpression  
RuleFromXReturnExpression_XReturnExpression ::= 'return' (XExpression  )?  
XReturnExpression ::= RuleFromXReturnExpression_XReturnExpression  
RuleFromXTryCatchFinallyExpression_XTryCatchFinallyExpression ::= 'try' XExpression (XCatchClause + ('finally' XExpression  )? |  'finally' XExpression  ) 
XTryCatchFinallyExpression ::= RuleFromXTryCatchFinallyExpression_XTryCatchFinallyExpression  
XSynchronizedExpression ::= ('synchronized' '('  ) XExpression ')' XExpression  
XCatchClause ::= 'catch' '(' FullJvmFormalParameter ')' XExpression  
QualifiedName ::= ValidID ('.' ValidID  )*  
Number ::= HEX |  (INT |  DECIMAL  )('.' (INT |  DECIMAL  ) )?  
StaticQualifier ::= (ValidID '::'  )+  
REFERENCE_JvmType_QualifiedName ::= QualifiedName
REFERENCE_JvmType_ValidID ::= ValidID
REFERENCE_JvmDeclaredType_QualifiedNameInStaticImport ::= QualifiedNameInStaticImport
REFERENCE_JvmDeclaredType_QualifiedName ::= QualifiedName
REFERENCE_types-JvmIdentifiableElement_FeatureCallID ::= FeatureCallID
REFERENCE_types-JvmIdentifiableElement_OpMultiAssign ::= OpMultiAssign
REFERENCE_types-JvmIdentifiableElement_OpOr ::= OpOr
REFERENCE_types-JvmIdentifiableElement_OpAnd ::= OpAnd
REFERENCE_types-JvmIdentifiableElement_OpEquality ::= OpEquality
REFERENCE_types-JvmIdentifiableElement_OpCompare ::= OpCompare
REFERENCE_types-JvmIdentifiableElement_OpOther ::= OpOther
REFERENCE_types-JvmIdentifiableElement_OpAdd ::= OpAdd
REFERENCE_types-JvmIdentifiableElement_OpMulti ::= OpMulti
REFERENCE_types-JvmIdentifiableElement_OpUnary ::= OpUnary
REFERENCE_types-JvmIdentifiableElement_OpPostfix ::= OpPostfix
REFERENCE_types-JvmIdentifiableElement_FeatureCallID ::= FeatureCallID
REFERENCE_types-JvmIdentifiableElement_IdOrSuper ::= IdOrSuper
REFERENCE_types-JvmIdentifiableElement_IdOrSuper ::= IdOrSuper
REFERENCE_types-JvmConstructor_QualifiedName ::= QualifiedName
REFERENCE_types-JvmType_QualifiedName ::= QualifiedName
